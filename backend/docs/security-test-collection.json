{
  "info": {
    "name": "Task Manager Security Test Suite",
    "description": "Comprehensive security testing collection for the Task Manager API",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000"
    },
    {
      "key": "authToken",
      "value": ""
    },
    {
      "key": "testUserId",
      "value": ""
    },
    {
      "key": "testTaskId",
      "value": ""
    },
    {
      "key": "testGroupId",
      "value": ""
    },
    {
      "key": "otherUserToken",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "üîê Authentication & Authorization Tests",
      "item": [
        {
          "name": "Register Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should register user successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    pm.globals.set('authToken', response.data.token);",
                  "    pm.globals.set('testUserId', response.data.user._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Security Test User\",\n    \"email\": \"securitytest@example.com\",\n    \"password\": \"SecureTest123!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Another User (for cross-user tests)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should register another user', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.globals.set('otherUserToken', response.data.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Other User\",\n    \"email\": \"otheruser@example.com\",\n    \"password\": \"AnotherSecure123!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "‚ùå Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should reject invalid credentials', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"securitytest@example.com\",\n    \"password\": \"WrongPassword\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "‚úÖ Login with Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should login successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    pm.globals.set('authToken', response.data.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"securitytest@example.com\",\n    \"password\": \"SecureTest123!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "‚ùå Access Protected Route Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should reject request without token', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.equal('NO_TOKEN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "‚ùå Access with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should reject invalid token', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.equal('TOKEN_INVALID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid.jwt.token",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        }
      ]
    },
    {
      "name": "üõ°Ô∏è Ownership & Authorization Tests",
      "item": [
        {
          "name": "Create Test Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should create group successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.globals.set('testGroupId', response.data._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Security Test Group\",\n    \"description\": \"Group for security testing\",\n    \"color\": \"#FF5722\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/groups",
              "host": ["{{baseUrl}}"],
              "path": ["api", "groups"]
            }
          }
        },
        {
          "name": "Create Test Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should create task successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.globals.set('testTaskId', response.data._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Security Test Task\",\n    \"description\": \"Task for security testing\",\n    \"priority\": \"medium\",\n    \"group\": \"{{testGroupId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "‚ùå Access Another User's Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should deny access to other user\\'s task', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.equal('RESOURCE_NOT_FOUND');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{otherUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{testTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{testTaskId}}"]
            }
          }
        },
        {
          "name": "‚ùå Update Another User's Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should deny updating other user\\'s task', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{otherUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Malicious Update\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{testTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{testTaskId}}"]
            }
          }
        },
        {
          "name": "‚ùå Delete Another User's Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should deny deleting other user\\'s task', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{otherUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{testTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{testTaskId}}"]
            }
          }
        },
        {
          "name": "‚úÖ Access Own Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should access own task successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data._id).to.equal(pm.globals.get('testTaskId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{testTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{testTaskId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üö® Input Validation & Injection Tests",
      "item": [
        {
          "name": "‚ùå SQL Injection Attempt in Task Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should handle SQL injection attempt', function () {",
                  "    // Should either reject (400) or sanitize the input",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 201]);",
                  "    if (pm.response.code === 201) {",
                  "        const response = pm.response.json();",
                  "        // Check that the malicious SQL was sanitized",
                  "        pm.expect(response.data.title).to.not.include('DROP TABLE');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"'; DROP TABLE users; --\",\n    \"description\": \"Malicious SQL injection attempt\",\n    \"group\": \"{{testGroupId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "‚ùå XSS Attempt in Task Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should handle XSS attempt', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 201]);",
                  "    if (pm.response.code === 201) {",
                  "        const response = pm.response.json();",
                  "        // Check that script tags were sanitized",
                  "        pm.expect(response.data.description).to.not.include('<script>');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"XSS Test Task\",\n    \"description\": \"<script>alert('XSS')</script>Malicious script\",\n    \"group\": \"{{testGroupId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "‚ùå Invalid MongoDB ObjectId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should reject invalid ObjectId', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.equal('INVALID_ID_FORMAT');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/invalid-object-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "invalid-object-id"]
            }
          }
        },
        {
          "name": "‚ùå Oversized Request Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should reject oversized request', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 413]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Normal Title\",\n    \"descriptionn    \"group\": \"{{testGroupId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ö° Rate Limiting Tests",
      "item": [
        {
          "name": "Rate Limit Test - Multiple Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test needs to be run multiple times quickly to test rate limiting",
                  "pm.test('Should eventually hit rate limit', function () {",
                  "    // In development, rate limiting might be relaxed",
                  "    // In production, this should return 429 after hitting limit",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "    ",
                  "    if (pm.response.code === 429) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.code).to.equal('RATE_LIMIT_EXCEEDED');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "Auth Rate Limit Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should handle auth rate limiting', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 429]);",
                  "    ",
                  "    if (pm.response.code === 429) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.code).to.equal('AUTH_RATE_LIMIT_EXCEEDED');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"wrongpassword\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üîí HTTPS & Security Headers Tests",
      "item": [
        {
          "name": "Check Security Headers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should have security headers', function () {",
                  "    // Check for common security headers",
                  "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.equal('nosniff');",
                  "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.equal('DENY');",
                  "    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.exist;",
                  "    ",
                  "    // Check that X-Powered-By is hidden",
                  "    pm.expect(pm.response.headers.get('X-Powered-By')).to.be.undefined;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          }
        },
        {
          "name": "Check CORS Headers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should have proper CORS configuration', function () {",
                  "    // CORS headers should be present",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Headers')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        }
      ]
    },
    {
      "name": "üßπ Cleanup Tests",
      "item": [
        {
          "name": "Delete Test Task",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{testTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{testTaskId}}"]
            }
          }
        },
        {
          "name": "Delete Test Group",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/groups/{{testGroupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "groups", "{{testGroupId}}"]
            }
          }
        }
      ]
    }
  ]
}